/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => MyPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var { exec } = require("child_process");
var nodeData = {};
var edgeData = {};
var graphDot = {};
var bcNodeList = app.plugins.plugins.breadcrumbs.mainG.toJSON().nodes;
var bcEdgeList = app.plugins.plugins.breadcrumbs.mainG.toJSON().edges;
function debug() {
  console.log("nodeData", nodeData);
  console.log("edgeData", edgeData);
  console.log("graphDot", graphDot);
  console.log("process.cwd()", process.cwd());
}
var workingDirectory = app.vault.adapter.getBasePath() + "\\" + app.vault.configDir + "\\plugins\\dotmaker\\graphs\\";
console.log("Starting directory: " + process.cwd());
try {
  process.chdir(workingDirectory);
  console.log("New directory: " + process.cwd());
} catch (err) {
  console.log("chdir: " + err);
}
var MyPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      console.clear();
      const nodeTypeListDeclaration = {
        masterGraph: {
          style: 'shape=plaintext style="filled, rounded" fontname="Lato" margin=0.2 fillcolor="#c6cac3"',
          graphHeader: `//splines=ortho;
		overlap=false
		style=rounded
		// ranksep="0.4";
		label="Thay \u0111\u1ED5i ni\u1EC1m tin ng\u01B0\u1EDDi c\xF3 ni\u1EC1m tin ti\xEAu c\u1EF1c";
		sep=10
		fontsize = 30
		labelloc="t";
		fontname="Lato";`
        },
        Giaiphap: {
          method: "End of edge type"
        },
        Ytuongtothon: {
          method: "End of edge type",
          style: 'shape=box, penwidth=1.5 fillcolor="#D1E4DD"'
        },
        Yeutohotro: {
          method: "End of edge type",
          style: 'shape=note fillcolor="#D1D1E4"'
        },
        Thamkhao: {
          method: "End of edge type",
          style: "shape=plain fillcolor=white"
        },
        Hanhdong: {
          method: "End of edge type",
          style: 'fillcolor="#E4D1D1" shape=polygon'
        },
        branch_1a: {
          method: "Index",
          cluster: true,
          subgraphSetting: 'label = "1a Megan c\u1EA3m th\u1EA5y qu\u1EA3 th\u1EF1c vi\u1EC7c n\xF3i chuy\u1EC7n v\u1EDBi Cueball s\u1EBD \u0111em l\u1EA1i \u0111i\u1EC1u m\xE0 m\xECnh lu\xF4n mong m\u1ECFi"\ncolor="#D1E4DD"\nstyle="filled, rounded"'
        },
        branch_1b: {
          method: "Index",
          cluster: true,
          subgraphSetting: 'label = "1b Megan c\u1EA3m th\u1EA5y nh\u1EEFng ng\u01B0\u1EDDi xung quanh c\xF4 c\u1EA3m th\u1EA5y c\xF4 n\xEAn tr\xF2 chuy\u1EC7n v\u1EDBi Cuball"\ncolor="#D1DFE4"\nstyle="filled, rounded"'
        },
        branch_i: {
          method: "Index",
          cluster: true,
          subgraphSetting: 'label = "i Megan d\xE1m n\xF3i r\u1EB1ng \\"t\xF4i s\u1EBD kh\xF4ng \u0111\u1EC3 n\u1ED7i s\u1EE3 chi ph\u1ED1i m\xECnh\\""'
        },
        branch_j: {
          method: "Index",
          cluster: true,
          subgraphSetting: 'label = "j Megan s\u1EBD kh\xF4ng d\u1EF1a v\xE0o c\u1EA3m x\xFAc \u0111\u1EC3 bi\u1EC7n minh cho h\xE0nh \u0111\u1ED9ng c\u1EE7a m\xECnh"'
        },
        branch_k: {
          method: "Index",
          cluster: true,
          subgraphSetting: 'label = "k Megan nghe \u0111\u01B0\u1EE3c c\xE1c c\xE2u chuy\u1EC7n c\u1EE7a nh\u1EEFng ng\u01B0\u1EDDi t\u01B0\u01A1ng t\u1EF1 ho\xE0n c\u1EA3nh c\u1EE7a m\xECnh"'
        },
        branch_l: {
          method: "Index",
          cluster: true,
          subgraphSetting: 'label = "l Megan mu\u1ED1n \u0111\u1EB7t c\xE2u h\u1ECFi v\u1EC1 t\u1EA5t c\u1EA3 nh\u1EEFng g\xEC m\xECnh ngh\u0129"'
        },
        branch_m: {
          method: "Index",
          cluster: true,
          subgraphSetting: 'label = "m Nh\u1EEFng Megan trong friendlist QC s\u1EBD l\xE0m \u0111i\u1EC1u t\u01B0\u01A1ng t\u1EF1"'
        },
        branch_n: {
          method: "Index",
          cluster: true,
          subgraphSetting: 'label = "n T\u1ED5 ch\u1EE9c th\xE0nh c\xF4ng cu\u1ED9c \u0111\u1ED1i tho\u1EA1i gi\u1EEFa nh\u1EEFng ng\u01B0\u1EDDi kh\xE1c bi\u1EC7t quan \u0111i\u1EC3m"'
        },
        branch_o: {
          method: "Index",
          cluster: true,
          subgraphSetting: 'label = "o T\u1ED5 ch\u1EE9c th\xE0nh c\xF4ng nh\u1EEFng bu\u1ED5i chia s\u1EBB v\xF2ng tr\xF2n"'
        },
        branch_p: {
          method: "Index",
          cluster: true,
          subgraphSetting: 'label = "p T\u1ED5 ch\u1EE9c th\xE0nh c\xF4ng c\xE1c bu\u1ED5i n\xF3i chuy\u1EC7n c\u1EE7a ng\u01B0\u1EDDi c\xF3 chuy\xEAn m\xF4n"'
        },
        branch_q: {
          method: "Index",
          cluster: true,
          subgraphSetting: 'label = "q C\xE1c ch\u1EE7 doanh nghi\u1EC7p \u0111\u1ED3ng \xFD h\u1ED7 tr\u1EE3 nh\xE2n vi\xEAn"'
        },
        branch_r: {
          method: "Index",
          cluster: true,
          subgraphSetting: 'label = "r C\u1ED9ng \u0111\u1ED3ng b\u1EA1n b\xE8 QC ph\xE1t tri\u1EC3n"'
        },
        branch_s: {
          method: "Index",
          cluster: true,
          subgraphSetting: 'label = "s K\u1EBFt h\u1EE3p \u0111\u01B0\u1EE3c v\u1EDBi c\xE1c d\u1EF1 \xE1n kh\xE1c"'
        }
      };
      const edgeTypeListDeclaration = {
        masterGraph: {
          style: "penwidth=1"
        },
        Giaiphap: {},
        Dichung: {
          pairing: true,
          style: "minlen=0 style=bold penwidth=5 dir=both arrowtype=odiamond"
        },
        Ytuongtothon: {},
        Yeutohotro: {},
        Thamkhao: {
          style: "style=dashed "
        },
        Hanhdong: {}
      };
      const nodeTypeList = Object.keys(nodeTypeListDeclaration);
      const edgeTypeList = Object.keys(edgeTypeListDeclaration);
      var IsBreadcrumbsrunning = new Promise((resolve, reject) => {
        if (bcEdgeList.length !== 0) {
          resolve("Breadcrumbs is running properly");
        } else {
          reject("Breadcrumbs has problem");
        }
      });
      IsBreadcrumbsrunning.then((message) => console.log(message)).catch((message) => console.log(message));
      function makeLabel(name) {
        return name.replace(/(?![^\n]{1,32}$)([^\n]{1,32})\s/g, "$1\\n").replace(/[❝❞]/g, '\\"');
      }
      function IndividualNodeType(nodetype, i2) {
        this.settings = nodeTypeListDeclaration[nodetype];
        this.settings.order = i2;
        this.nodes = [];
        this.neighborNode = {
          sourceOf: [],
          targetOf: []
        };
      }
      function IndividualNode(name, nodetype) {
        this.name = name;
        this.label = makeLabel(this.name);
        this.index = this.name.split(" ")[0];
        this.path = this.name + ".md";
        this.folder = this.path.split("/").slice(0, -1).join("/");
        this.tag = "none";
        this.frontmatter = "none";
        this.inMetadata = false;
        this.endOfEdgeType = nodetype;
        this.neighbor = {
          sourceOf: bcEdgeList.filter((edge) => edge.source == this.name).map((edge) => edge.target),
          targetOf: bcEdgeList.filter((edge) => edge.target == this.name).map((edge) => edge.source)
        };
        this.existsInMetadata = function() {
          if (Object.keys(app.metadataCache.fileCache).includes(this.path)) {
            this.inMetadata = true;
            var nodeMetadata = app.metadataCache.getCache(this.path);
            if (nodeMetadata.frontmatter !== void 0) {
              this.frontmatter = nodeMetadata.frontmatter;
            }
            if (nodeMetadata.tags !== void 0) {
              this.tag = nodeMetadata.tags;
            }
          }
        };
      }
      function createNodeTmp(item, nodetype, nodeTypeTmp) {
        const nodeTmp = new IndividualNode(item.target, nodetype);
        nodeTmp.existsInMetadata();
        nodeTypeTmp.nodes.push(nodeTmp);
      }
      let i = 0;
      nodeTypeList.forEach((nodetype) => {
        const method = nodeTypeListDeclaration[nodetype].method;
        const nodeTypeTmp = new IndividualNodeType(nodetype, i);
        bcEdgeList.forEach((item) => {
          if (method == "End of edge type") {
            if (item.attributes.field == nodetype) {
              createNodeTmp(item, nodetype, nodeTypeTmp);
            }
          }
          if (method == "Index") {
            var branchIndex = nodetype.split("_")[nodetype.split("_").length - 1];
            var itemIndex = item.target.split(" ")[0];
            var itemBranchIndex = itemIndex.split("-")[0].split(".")[0];
            if (itemBranchIndex == branchIndex || itemBranchIndex + "+" == branchIndex) {
              createNodeTmp(item, nodetype, nodeTypeTmp);
            }
          }
        });
        nodeData[nodetype] = nodeTypeTmp;
        i++;
      });
      nodeTypeList.forEach((nodetype) => {
        var tmpTarget = [];
        var tmpSource = [];
        nodeData[nodetype].nodes.forEach((node) => {
          tmpTarget = tmpTarget.concat(node.neighbor.targetOf);
          tmpSource = tmpSource.concat(node.neighbor.sourceOf);
        });
        nodeData[nodetype].neighborNode.targetOf = [...new Set(tmpTarget)];
        nodeData[nodetype].neighborNode.sourceOf = [...new Set(tmpSource)];
      });
      function IndividualEdgeType() {
        this.settings = "";
        this.edges = [];
      }
      function IndividualEdge(start, dir, end, id) {
        this.start = start;
        this.end = end;
        this.id = id;
      }
      const edgeTypeNoDeclare = new IndividualEdgeType();
      edgeTypeNoDeclare.type = "This link field in Breadcrumbs plugin isn't declared in Hierarchical Graph plugin";
      let j = 0;
      edgeTypeList.forEach((edgetype) => {
        const edgeTypeTmp = new IndividualEdgeType();
        edgeTypeTmp.settings = edgeTypeListDeclaration[edgetype];
        edgeTypeTmp.settings.order = j;
        bcEdgeList.forEach((edge) => {
          var bcEdgeField = edge.attributes.field;
          const edgeTmp = new IndividualEdge();
          edgeTmp.start = edge.source;
          edgeTmp.end = edge.target;
          edgeTmp.id = edge.key;
          if (bcEdgeField == edgetype) {
            edgeTypeTmp.edges.push(edgeTmp);
          } else if (!edgeTypeList.includes(bcEdgeField)) {
            edgeTypeNoDeclare.edges.push(edgeTmp);
          }
        });
        edgeData[edgetype] = edgeTypeTmp;
        j++;
      });
      edgeData["No Declared"] = edgeTypeNoDeclare;
      function addNodesForEachGraph(graph, nodetype, node) {
        const neighborNode = nodeData[graph].neighborNode;
        if (graph == "masterGraph") {
          graphDot.masterGraph.nodeSection += `"${node.name}" [ label = "${node.label}" ] 
`;
        }
        if (graph !== "masterGraph" && nodetype == graph) {
          graphDot[graph].nodeSection += `"${node.name}" [ label = "${node.label}" ] 
`;
        }
        if (graph !== "masterGraph" && nodetype !== graph && (neighborNode.sourceOf.includes(node.name) || neighborNode.targetOf.includes(node.name))) {
          graphDot[graph].nodeSection += `"${node.name}" [ label = "${node.label}" ] 
`;
        }
      }
      function addPairingEdgesForEachGraph(graph, edgetype, edge, k2, style) {
        if (graph == "masterGraph") {
          graphDot.masterGraph.edgeSection += `
subgraph cluster_${edgetype}_${k2}{
rank=same
edge [ ${style} ]
"${edge.start}" -> "${edge.end}"
}`;
        }
        if (graph != "masterGraph" && edgetype == graph) {
          graphDot[graph].edgeSection += `
		subgraph cluster_${edgetype}_${k2}{
			rank=same
			edge [ ${style} ]
			"${edge.start}" -> "${edge.end}"
}`;
        }
        k2++;
      }
      function addNonPairingEdgesForEachGraph(graph, edgetype, edge) {
        if (graph == "masterGraph") {
          graphDot.masterGraph.edgeSection += `"${edge.start}" -> "${edge.end}"
`;
        }
        function checkNodeRelationToCurrentGraph(edgetype2, edge2, graph2) {
          var a = nodeData[graph2].nodes.filter((node) => node.name == edge2.start || node.name == edge2.end);
          if (a.length != 0) {
            return true;
          }
        }
        if (graph !== "masterGraph" && checkNodeRelationToCurrentGraph(edgetype, edge, graph)) {
          graphDot[graph].edgeSection += `"${edge.start}" -> "${edge.end}"
`;
        }
      }
      for (const graph in nodeTypeListDeclaration) {
        graphDot[graph] = {
          nodeSection: "",
          edgeSection: "",
          final: ""
        };
        graphDot[graph].nodeSection = `//NODES
//====================

`;
        nodeTypeList.forEach((nodetype) => {
          const style = nodeData[nodetype].settings.style;
          const cluster = nodeData[nodetype].settings.cluster;
          const subgraphSetting = nodeData[nodetype].settings.subgraphSetting;
          graphDot[graph].nodeSection += `
node [ ${nodeData.masterGraph.settings.style} ] //Reset style

`;
          graphDot[graph].nodeSection += `//All ${nodetype} nodes
`;
          if (cluster == true) {
            graphDot[graph].nodeSection += `subgraph cluster_${nodetype}{
${subgraphSetting}
`;
          }
          if (style !== void 0) {
            graphDot[graph].nodeSection += `
node [ ${style} ]
`;
          }
          nodeData[nodetype].nodes.forEach((node) => addNodesForEachGraph(graph, nodetype, node));
          if (cluster == true) {
            graphDot[graph].nodeSection += `}
`;
          }
        });
        graphDot[graph].edgeSection = `

//EDGES
//====================
`;
        var k = 0;
        edgeTypeList.forEach((edgetype) => {
          const sameRank = edgeData[edgetype].settings.sameRank;
          const cluster = edgeData[edgetype].settings.cluster;
          const style = edgeData[edgetype].settings.style;
          const pairing = edgeData[edgetype].settings.pairing;
          if (edgeData.masterGraph.settings.style !== void 0) {
            graphDot[graph].edgeSection += `
edge [ ${edgeData.masterGraph.settings.style} ] //Reset style
`;
          }
          graphDot[graph].edgeSection += `
//All ${edgetype} edges
`;
          if (pairing == true) {
            edgeData[edgetype].edges.forEach((edge) => {
              addPairingEdgesForEachGraph(graph, edgetype, edge, k, style);
              k++;
            });
          } else {
            if (cluster == true && sameRank == true) {
              graphDot[graph].edgeSection += `subgraph cluster_${edgetype}{
rank=same
`;
            }
            if (cluster == true && sameRank !== true) {
              graphDot[graph].edgeSection += `subgraph cluster_${edgetype}{
`;
            }
            if (cluster !== true && sameRank == true) {
              graphDot[graph].edgeSection += `subgraph {
rank=same
`;
            }
            if (style !== void 0) {
              graphDot[graph].edgeSection += `
edge [ ${style} ]
`;
            }
            edgeData[edgetype].edges.forEach((edge) => {
              addNonPairingEdgesForEachGraph(graph, edgetype, edge);
            });
            if (cluster == true || sameRank == true) {
              graphDot[graph].edgeSection += `}
`;
            }
          }
        });
        graphDot[graph].edgeSection += `
}`;
        graphDot[graph].final = `digraph ${graph}{
${nodeData.masterGraph.settings.graphHeader}
`;
        graphDot[graph].final += graphDot[graph].nodeSection + graphDot[graph].edgeSection;
        const commandList = [
          `unflatten -l 3 ${graph}.dot -o unflatten_${graph}.dot`,
          `dot -Tpng unflatten_${graph}.dot -o dot_${graph}.png`
        ];
        var filePath = app.vault.configDir + "\\plugins\\dotmaker\\graphs\\" + graph + ".dot";
        app.vault.adapter.write(filePath, graphDot[graph].final);
        commandList.forEach((command) => exec(command, (error, stdout, stderr) => {
          console.log("filePath:", filePath);
          console.log(graph, command);
          console.log("stdout:", stdout);
          console.log("stderr:", stderr);
          if (error !== null) {
            console.log(`exec error: ${error}`);
          }
        }));
      }
      debug();
      console.log("done");
    });
  }
  onunload() {
    console.log("unloading plugin");
  }
};
//# sourceMappingURL=data:application/json;base64,
